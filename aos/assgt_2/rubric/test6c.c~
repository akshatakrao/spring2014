#include<stdio.h>
#include<gtthread.h>

gtthread_mutex_t* mutex;
int counter = 0;

void thread1fn()
{
	if(counter > 1)
		return;

	gtthread_t* thread2;
	
	thread2 = (gtthread_t*)malloc(sizeof(gtthread_t));
	gtthread_create(thread2, &thread1fn, counter);
	
	int  i = 0;

	while(i< 10)
	{
		fprintf(stderr, "\nLOG: Thread %d %d", counter, i);
		i++;
	}

	counter++;	
}

void thread2fn()
{
	gtthread_yield();
	fprintf(stderr, "Thread 2 resume after yield");

}


int main()
{

  int a = 5;	
  void* returnVal;	  
  gtthread_t* thread1, *thread2;
 
  gtthread_init(500);
	 
  thread1 = (gtthread_t*)malloc(sizeof(gtthread_t));
  gtthread_create(thread1, &thread1fn, NULL);

  fprintf(stderr, "Thread 1 state %d", thread1->state);
  gtthread_join(*thread1, &returnVal);
	
  fprintf(stderr, "im here");
  
  return 0;
}

